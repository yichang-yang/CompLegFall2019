######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
# create list of basic libraries that are essential
basic.packages <- c("package:stats","package:graphics","package:grDevices",
"package:utils","package:datasets","package:methods","package:base")
# find all packages that are floating in the global environment
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
# make sure that basic packages aren't dropped
package.list <- setdiff(package.list,basic.packages)
# remove all extra packages
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
# execute function to keep only basic packages in global envir.
detachAllPackages()
# set working directory
# which should be the same for everyone
# assuming GitHub is in your "Documents" folder
setwd("~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Members (CSV)/")
# load libraries
pkgTest <- function(pkg){
# check whether a package is installed
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
# if there are any packeages that need to be installed
if (length(new.pkg))
# install package
install.packages(new.pkg, dependencies = TRUE)
# and then load all packages user listed
sapply(pkg, require, character.only = TRUE)
}
# apply function to load libraries and install them if necessary
lapply(c("stringr", "tidyverse", "tidyr", "dplyr", "plyr"), pkgTest)
#######################
# load dataset of MPs
#######################
# read in your .csv files
# first, check which files are in the working directory
filenames <- gsub("\\.csv$","", list.files(pattern="\\.csv$"))
# iterate over those file names and read each .csv
for(i in filenames){
# Tip: you almost always want to read stringsAsFactors=F in .csv
# because you want to often text as text, not factors
assign(i, read.csv(paste(i, ".csv", sep=""), stringsAsFactors = F, encoding = "UTF-8"))
}
# you will need to add the .csv for the most current legislative session
################################
# load dataset of constituencies
################################
# you'll want this later to merge w/ info from MPs
constituencies <- read.csv("../canada_constituencies.csv", stringsAsFactors = F, encoding = "UTF-8")
########################################
# distinguish b/w parliamentary sessions
########################################
# create a variable denoting which parliamentary session each dataframe is
# this is useful for when we combine the dataframes together by stacking
# them on top of each other by row (see line 89)
# first, create function to go over each dataframe
findNumber <- function(df){
# and grab any numbers in the name of that dataframe
# create that variable and apply value for each row
df$parliamentNumber <- gsub("[^[:digit:].]", "", i)
# return data frame
return(df)
}
# find all data frames in the global environment
globalEnvir <- .GlobalEnv
# iterate over all those data frame
for(i in filenames){
# apply function to each data frame in global environment
globalEnvir[[i]] <- findNumber(globalEnvir[[i]])
}
# can always check to make sure it worked
# ex; look at canada_commons_members_parl40$parliamentNumber
#############################
# create one large dataframe
#############################
# stack dataframes on top of each other
# to create one large dataframe
allMPs <- do.call(rbind, mget(filenames))
#######################################
# manipulate new data frame of all MPs
#######################################
# rename variables to match codebook
names(allMPs) <- c("title", "first_name", "last_name", "constituency_name",
"province_name", "party_name", "start_date", "end_date", "parliament_number")
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
return(df)
}
View(allMPs)
test <- removeAllSpaces(allMPs[, !names(allMPs) %in% c("title", "start_date", "end_date", "parliament_number")])
test <-allMPs[, names(allMPs) %in% c("title", "start_date", "end_date", "parliament_number")]
test <- cbind(allMPs[, names(allMPs) %in% c("title", "start_date", "end_date", "parliament_number")],
removeAllSpaces(allMPs[, !names(allMPs) %in% c("title", "start_date", "end_date", "parliament_number")]))
View(test)
-
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
# execute cleaning function over some variables, but not others
df <- cbind(df[, names(df) %in% colsToClean],
removeAllSpaces(df[, !names(df) %in% colsToClean]))
return(df)
}
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
# execute cleaning function over some variables, but not others
df <- cbind(df[, names(df) %in% colsToClean],
removeAllSpaces(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
# execute cleaning function over some variables, but not others
df <- cbind(df[, names(df) %in% colsToClean],
removeAllSpaces(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
# execute cleaning function over some variables, but not others
browser()
df <- cbind(df[, names(df) %in% colsToClean],
removeAllSpaces(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
df[, names(df) %in% colsToClean]
df[, !names(df) %in% colsToClean]
removeAllSpaces(df[, !names(df) %in% colsToClean])
Q
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
browser()
df <- cbind(df[, names(df) %in% colsToClean],
removeAllSpaces(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
browser()
df <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
internalFunc(df[, !names(df) %in% colsToClean])
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
browser()
df <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
internalFunc(df[, !names(df) %in% colsToClean])
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
df <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(df)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
newDF <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(newDF)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
}
# execute cleaning function over some variables, but not others
browser()
newDF <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(newDF)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
internalFunc(df[, !names(df) %in% colsToClean])
df[, !names(df) %in% colsToClean]
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
return(df)
}
# execute cleaning function over some variables, but not others
browser()
newDF <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(newDF)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
internalFunc(df[, !names(df) %in% colsToClean])
# trim white space
# create function to remove:
# (1) any extra spaces b/w words
# (2) spaces in front of and behind words
removeAllSpaces <- function(df, colsToClean=NULL){
internalFunc <- function(df){
for(vec in names(df)){
df[,vec] <- str_replace_all(df[,vec], "[[:space:]]+", " ")
df[,vec] <- str_trim(df[,vec])
}
return(df)
}
# execute cleaning function over some variables, but not others
newDF <- cbind(df[, names(df) %in% colsToClean],
internalFunc(df[, !names(df) %in% colsToClean]))
return(newDF)
}
test <- removeAllSpaces(allMPs, colsToClean=c("title", "start_date", "end_date", "parliament_number"))
View(test)
which(allMPs$constituency_name == "Western Arctic")
allMPs$constituency_name[allMPs$constituency_name == "Western Arctic"]
# fix constituency name
allMPs$constituency_name[allMPs$constituency_name == "Western Arctic"] <- "Northwest Territories"
which(allMPs$constituency_name == "Western Arctic")
grep('year', allMPs$start_year)
grep('year', "start_year")
grep('year', names(allMPs))
grepl('year', names(allMPs))
names(allMPs)
