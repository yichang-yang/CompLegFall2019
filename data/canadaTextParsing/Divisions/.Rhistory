summary(reg_simple)
corr(log(meap93$expend), meap93$lnchprg)
cor(log(meap93$expend), meap93$lnchprg)
data('meapsingle')
reg_single <- lm(math4 ~ pctsgle, data = meapsingle )
summary(reg_single)
summary(reg_single)
data('meapsingle')
reg_single <- lm(math4 ~ pctsgle, data = meapsingle)
summary(reg_single)
reg_two <- lm(math4 ~ pctsgle + lmedinc + free, data = meapsingle)
summary(reg_two)
corr(log(medinc),free)
corr(log(meapsingle$medinc),meapsingle$free)
cor(log(meapsingle$medinc),meapsingle$free)
cor(1,1)
cor(log(meapsingle$medinc), meapsingle$free)
cor(log(meapsingle$medinc), meapsingle$free)
lm(pctsgle ~ lmedinc + free)
lm(pctsgle ~ lmedinc + free, data = meapsingle)
summary(lm(pctsgle ~ lmedinc + free, data = meapsingle))
summary(lm(free ~ pctsgle + free, data = meapsingle))
summary(lm(lmedinc ~ pctsgle + free, data = meapsingle))
summary(lm(free ~ pctsgle + lmedinc, data = meapsingle))
summary(lm(pctsgle ~ medinc + free, data = meapsingle))
summary(lm(free ~ pctsgle + medinc, data = meapsingle))
summary(lm(medinc ~ pctsgle + free, data = meapsingle))
summary(lm(lmedinc ~ pctsgle + free, data = meapsingle))
#reset the environment
remove(list = ls())
#set working directory
setwd("/Users/mark_alfie/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Divisions")
#load the existing datasets
prev_divi <- read.csv("canada_divisions.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
prev_divi_bd <- read.csv("canada_divisions_breakdown.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
setwd("/Users/mark_alfie/Desktop/QTM\ 499R")
#set working directory
setwd("/Users/mark_alfie/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Divisions")
#xml
result <- xmlParse(file = "canada_divisions_42.xml")
library(XML)
library(plyr)
library(ggplot2)
library(gridExtra)
library(methods)
#xml
result <- xmlParse(file = "canada_divisions_42.xml")
print(result)
rootnode <- xmlRoot(result)
rootnode
rootsize <- xmlSize(rootnode)
result[1]
rootnode[1]
rootnode[1379]
xmldata <- xmlToDataFrame(result)
View(xmldata)
colnames(prev_divi)
colnames(xmldata)
View(xmldata)
class(xmldata$DecisionEventDateTime)
class(xmldata$SessionNumber)
xmldata <- xmldata %>%
rename(xmldate, parliament_ID = ParliamentNumber, session_ID = SessionNumber, date = DecisionEventDateTime, type =DecisionDivisionSubject
bill_number = BillNumberCode, result = DecisionResultName, yea = DecisionDivisionNumberOfYeas, nay = DecisionDivisionNumberOfNays,
paired = DecisionDivisionNumberOfPaired)
xmldata <- xmldata %>%
rename(xmldate, list(parliament_ID = ParliamentNumber, session_ID = SessionNumber, date = DecisionEventDateTime, type =DecisionDivisionSubject
bill_number = BillNumberCode, result = DecisionResultName, yea = DecisionDivisionNumberOfYeas, nay = DecisionDivisionNumberOfNays,
paired = DecisionDivisionNumberOfPaired))
bill_number = BillNumberCode, result = DecisionResultName, yea = DecisionDivisionNumberOfYeas, nay = DecisionDivisionNumberOfNays,
paired = DecisionDivisionNumberOfPaired)
xmldata <- xmldata %>%
rename(xmldate, parliament_ID = ParliamentNumber, session_ID = SessionNumber, date = DecisionEventDateTime, type =DecisionDivisionSubject
bill_number = BillNumberCode, result = DecisionResultName, yea = DecisionDivisionNumberOfYeas, nay = DecisionDivisionNumberOfNays,
paired = DecisionDivisionNumberOfPaired)
colnames(prev_divi)
colnames(xmldata)
xmldata <- xmldata %>%
setname(xmldate, old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
library(dplyr)
xmldata <- xmldata %>%
setname(xmldate, old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
library(data.table)
xmldata <- xmldata %>%
setnames(xmldate, old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
xmldata <- xmlToDataFrame(result)
colnames(prev_divi)
colnames(xmldata)
xmldata <- xmldata %>%
setnames(xmldate, old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
View(xmldata)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired"))
xmldata <- xmlToDataFrame(result)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
end(xmldata)
tail(xmldata)
xmldata<- xmldata %>%
mutate(key_ID = 2161:2161+1379)
xmldata<- xmldata %>%
mutate(key_ID = 2161:3540)
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539)
xmldate[1]
xmldata[1]
xmldata[1,]
xmldata[bill_number]
xmldata[bill_number = NA]
xmldata[bill_number == NA]
levels(xmldata$bill_number)
xmldata[xmldata$bill_number == ""] <- "None"
levels(xmldata$bill_number) <- "None"
levels(xmldata$bill_number) <- c(levels(xmldata$bill_number), "None")
xmldata[xmldata$bill_number == ""] <- "None"
xmldata[xmldata$bill_number == ""] <- "None!"
levels(xmldata$bill_number)
xmldata$bill_number[xmldata$bill_number == ""] <- "None"
levels(xmldata$bill_number) <- "hi"
levels(xmldata$bill_number) <- as.factor("hi")
new_ministry<-new_ministry %>%
arrange(Last.Name, First.Name, constituency_name)%>%
group_by(ministry_number) %>%
mutate(minister_number = row_number()) %>%
mutate(minister_path = paste0("/ministry-", ministry_number, "/minister-", minister_number)) %>%
mutate(portfolio_path = paste0(minister_path, "/portfolio-", protfolio_number))%>%
mutate(observation_path = portfolio_path)%>%
select(observation_path, ministry_path, minister_path, portfolio_path, ministry_number, minister_number, member_name = full_name, member_ID = ministry_number, constituency_ID = constituency_name, profolio_name = Title,start_date, end_date)
xmldata <- xmlToDataFrame(result)
colnames(prev_divi)
colnames(xmldata)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
levels(xmldata$bill_number) <- c(levels(xmldata$bill_number), "None") %>%
levels(xmldata$bill_number) %>%
xmldata$bill_number[xmldata$bill_number == ""] <- "None"
levels(xmldata$bill_number) <- c(levels(xmldata$bill_number), "None")
levels(xmldata$bill_number)
xmldata$bill_number[xmldata$bill_number == ""] <- "None"
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(division_ID, bill_number), "None"))
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-",, bill_number), "None"))
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
class(xmldata$date)
xmldata$date <- as.character(xmldata$date)
class(xmldata$date)
substr(xmldata$date, 1, 5)
substr(xmldata$date, 1, 9)
xmldata$date <- substr(xmldata$date, 1, 9)
xmldata$date <- substr(xmldata$date, 1, 10)
xmldata$date <- substr(xmldata$date, 1, 10)
xmldata <- xmlToDataFrame(result)
xmldata$date <- substr(xmldata$date, 1, 10)
xmldata <- xmlToDataFrame(result)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
levels(xmldata$bill_number) <- c(levels(xmldata$bill_number), "None")
levels(xmldata$bill_number)
xmldata$bill_number[xmldata$bill_number == ""] <- "None"
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
xmldata$date <- as.character(xmldata$date)
xmldata$date <- substr(xmldata$date, 1, 10)
xmldata$date <- as.factor(xmldata$date)
xmldata$type <- "Missing"
xmldata <- xmlToDataFrame(result)
xmldata <- xmldata %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
levels(xmldata$bill_number) <- c(levels(xmldata$bill_number), "None")
levels(xmldata$bill_number)
xmldata$bill_number[xmldata$bill_number == ""] <- "None"
xmldata<- xmldata %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
xmldata$type.replace("", "MISSING" , inplace=True)
xmldata$type[xmldata$type==""]  <- "MISSING"
xmldata$type <- as.character(xmldata$type)
xmldata$type[xmldata$type==""]  <- "MISSING"
votes$type <- as.character(votes$type)
#reset the environment
remove(list = ls())
#set working directory
setwd("/Users/mark_alfie/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Divisions")
#load the existing datasets
prev_divi <- read.csv("canada_divisions.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
prev_divi_bd <- read.csv("canada_divisions_breakdown.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
#xml
result <- xmlParse(file = "canada_divisions_42.xml")
print(result)
rootnode <- xmlRoot(result)
rootsize <- xmlSize(rootnode)
votes <- xmlToDataFrame(result)
colnames(prev_divi)
colnames(votes)
votes <- votes %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
levels(votes$bill_number) <- c(levels(votes$bill_number), "None")
levels(votes$bill_number)
votes$bill_number[xmldata$bill_number == ""] <- "None"
votes<- votes %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes$bill_number[votes$bill_number == ""] <- "None"
votes$date <- as.character(votes$date)
votes$date <- substr(votes$date, 1, 10)
votes$date <- as.factor(votes$date)
votes$type <- as.character(votes$type)
votes$type[votes$type==""]  <- "MISSING"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^3rd reading")] <- "Bill: third reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Concurrence at report stage")] <- "Bill: concurrence at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(report stage (sub)?amendment")] <- "Bill: amendment at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Time allocation for Bill")] <- "Bill: time allocation"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Motion respecting Senate amendments to Bill")] <- "Bill: motion respecting Senate amendments"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(referral (to a committee|of subject)")] <- "Bill: referral to a committee"
library(stringr)
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^3rd reading")] <- "Bill: third reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Concurrence at report stage")] <- "Bill: concurrence at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(report stage (sub)?amendment")] <- "Bill: amendment at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Time allocation for Bill")] <- "Bill: time allocation"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Motion respecting Senate amendments to Bill")] <- "Bill: motion respecting Senate amendments"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(referral (to a committee|of subject)")] <- "Bill: referral to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(recommittal to a committee")] <- "Bill: recommittal to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(hoist amendment")] <- "Bill: hoist amendment"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Opposition Motion")] <- "Motion (opposition)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Government Business")] <- "Government business"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Private Members' Business")] <- "Motion (private members' business)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Appointment of an officer")] <- "Other (appointment of an officer)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "Report of the (Standing|Special)")] <- "Other (report)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Budgetary policy")] <- "Other (budgetary policy)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to adjourn the debate")] <- "Motion (to adjourn the debate)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion for closure")] <- "Motion (for closure)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to adjourn the House")] <- "Motion (to adjourn the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to hear another Member")] <- "Motion (to hear another member)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to proceed to Orders of the Day")] <- "Motion (to proceed to Orders of the Day)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to restore a vote in estimates")] <- "Motion (to restore a vote in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion for the production of papers")] <- "Motion (for the production of papers)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion respecting the proceedings and business of the House")] <- "Motion (respecting the proceedings and business of the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Ways and Means motion")] <- "Motion (Ways and Means)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Referral of a question of privilege to committee")] <- "Other (referral of a question of privilage to a committee)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Address in Reply to the Speech from the Throne")] <- "Other (address in reply to the Speech from the Throne)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in an opposed item")] <- "Concurrence (in an opposed item)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in estimates")] <- "Concurrence (in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in Interim Supply")] <- "Concurrence (in interim supply)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in the Report")] <- "Concurrence (in a report)"
View(votes)
votes<- votes %>%
mutate(key_ID = 2161:3539) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^3rd reading")] <- "Bill: third reading"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Concurrence at report stage")] <- "Bill: concurrence at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(report stage (sub)?amendment")] <- "Bill: amendment at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Time allocation for Bill")] <- "Bill: time allocation"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Motion respecting Senate amendments to Bill")] <- "Bill: motion respecting Senate amendments"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(referral (to a committee|of subject)")] <- "Bill: referral to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(recommittal to a committee")] <- "Bill: recommittal to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(hoist amendment")] <- "Bill: hoist amendment"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Opposition Motion")] <- "Motion (opposition)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Government Business")] <- "Government business"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Private Members' Business")] <- "Motion (private members' business)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Appointment of an officer")] <- "Other (appointment of an officer)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "Report of the (Standing|Special)")] <- "Other (report)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Budgetary policy")] <- "Other (budgetary policy)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to adjourn the debate")] <- "Motion (to adjourn the debate)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion for closure")] <- "Motion (for closure)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to adjourn the House")] <- "Motion (to adjourn the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to hear another Member")] <- "Motion (to hear another member)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to proceed to Orders of the Day")] <- "Motion (to proceed to Orders of the Day)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to restore a vote in estimates")] <- "Motion (to restore a vote in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion for the production of papers")] <- "Motion (for the production of papers)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion respecting the proceedings and business of the House")] <- "Motion (respecting the proceedings and business of the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Ways and Means motion")] <- "Motion (Ways and Means)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Referral of a question of privilege to committee")] <- "Other (referral of a question of privilage to a committee)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Address in Reply to the Speech from the Throne")] <- "Other (address in reply to the Speech from the Throne)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in an opposed item")] <- "Concurrence (in an opposed item)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in estimates")] <- "Concurrence (in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in Interim Supply")] <- "Concurrence (in interim supply)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in the Report")] <- "Concurrence (in a report)"
votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
View(votes2)
votes2$parliament_ID <- as.numeric(votes2$parliament_ID)
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2$parliament_ID <- as.numeric(as.character(votes2$parliament_ID))
votes2$parliament_ID <- as.numeric(as.character(votes2$parliament_ID))
View(votes2)
as.character(votes2$parliament_ID)
votes2$parliament_ID <- as.numeric(as.character(votes2$parliament_ID))
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2$parliament_ID <- as.character(votes2$parliament_ID)
votes2$parliament_ID <- as.character(votes2$parliament_ID)
View(votes2)
votes2$parliament_ID <- as.numeric(votes$parliament_ID)
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2$parliament_ID <- as.numeric(votes2$parliament_ID)
View(votes2)
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
View(votes2)
votes2$parliament_ID <- as.numeric(votes2$parliament_ID)
votes2$parliament_ID
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2$parliament_ID <- as.numeric(as.character(votes2$parliament_ID))
votes2$parliament_ID
class(votes2$parliament_ID)
View(votes2)
View(votes2)
write.csv(votes2, file="42division.csv")
setwd("/Users/mark_alfie/Desktop/QTM\ 499R ")
setwd("/Users/mark_alfie/Desktop/QTM\ 499R ")
write.csv(votes2, file="42division.csv")
votesTotal <- rbind(prev_divi,votes2)
write.csv(votesTotal, file="votesTotal.csv")
#reset the environment
remove(list = ls())
#set working directory
setwd("/Users/mark_alfie/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Divisions")
#load the existing datasets
prev_divi <- read.csv("canada_divisions.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
prev_divi_bd <- read.csv("canada_divisions_breakdown.csv", encoding = "UTF-8", stringsAsFactors = FALSE)
#xml
result <- xmlParse(file = "canada_divisions_42.xml")
print(result)
rootnode <- xmlRoot(result)
rootsize <- xmlSize(rootnode)
votes <- xmlToDataFrame(result)
colnames(prev_divi)
colnames(votes)
votes <- votes %>%
setnames(old = c("ParliamentNumber", "SessionNumber", "DecisionEventDateTime", "DecisionDivisionSubject", "BillNumberCode", "DecisionResultName",
"DecisionDivisionNumberOfYeas", "DecisionDivisionNumberOfNays", "DecisionDivisionNumberOfPaired" ),
new =c("parliament_ID", "session_ID",  "date", "type", "bill_number",
"result", "yea", "nay", "paired")) %>%
select(parliament_ID, session_ID,  date, type, bill_number,
result, yea, nay, paired)
levels(votes$bill_number) <- c(levels(votes$bill_number), "None")
levels(votes$bill_number)
votes$bill_number[votes$bill_number == ""] <- "None"
votes<- votes %>%
mutate(key_ID = 1:nrow()) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes<- votes %>%
mutate(key_ID = 1:nrow(parliament_ID)) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
View(votes)
votes<- votes %>%
mutate(key_ID = 1:nrow(session_ID)) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes<- votes %>%
mutate(key_ID = 1:nrow(votes$session_ID)) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes2 <- votes %>%
mutate(key_id = 1:length(votes$session_ID))
votes2
votes<- votes %>%
mutate(key_ID = 1:length(votes$session_ID)) %>%
mutate(division_number = key_ID)%>%
mutate(division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID))%>%
mutate(bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
votes<- votes %>%
mutate(key_ID = 1:length(votes$session_ID),
division_number = key_ID)
votes<- votes %>%
mutate(key_ID = 1:length(votes$session_ID),
division_number = key_ID,
division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID), bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"));
votes<- votes %>%
mutate(key_ID = 1:length(votes$session_ID),
division_number = key_ID,
division_ID = paste0(parliament_ID, "-", session_ID, "-", key_ID), bill_ID = ifelse(bill_number != "None", paste0(parliament_ID, "-", session_ID, "-", bill_number), "None"))
View(votes)
votes$date <- as.character(votes$date)
votes$date <- substr(votes$date, 1, 10)
votes$date <- as.factor(votes$date)
votes$type <- as.character(votes$type)
votes$type[votes$type==""]  <- "MISSING"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^3rd reading")] <- "Bill: third reading"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Concurrence at report stage")] <- "Bill: concurrence at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(report stage (sub)?amendment")] <- "Bill: amendment at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Time allocation for Bill")] <- "Bill: time allocation"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "^Motion respecting Senate amendments to Bill")] <- "Bill: motion respecting Senate amendments"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(referral (to a committee|of subject)")] <- "Bill: referral to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(recommittal to a committee")] <- "Bill: recommittal to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$type, "\\(hoist amendment")] <- "Bill: hoist amendment"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Opposition Motion")] <- "Motion (opposition)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Government Business")] <- "Government business"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Private Members' Business")] <- "Motion (private members' business)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Appointment of an officer")] <- "Other (appointment of an officer)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "Report of the (Standing|Special)")] <- "Other (report)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Budgetary policy")] <- "Other (budgetary policy)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to adjourn the debate")] <- "Motion (to adjourn the debate)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion for closure")] <- "Motion (for closure)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to adjourn the House")] <- "Motion (to adjourn the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to hear another Member")] <- "Motion (to hear another member)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to proceed to Orders of the Day")] <- "Motion (to proceed to Orders of the Day)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion to restore a vote in estimates")] <- "Motion (to restore a vote in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion for the production of papers")] <- "Motion (for the production of papers)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Motion respecting the proceedings and business of the House")] <- "Motion (respecting the proceedings and business of the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Ways and Means motion")] <- "Motion (Ways and Means)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Referral of a question of privilege to committee")] <- "Other (referral of a question of privilage to a committee)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Address in Reply to the Speech from the Throne")] <- "Other (address in reply to the Speech from the Throne)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in an opposed item")] <- "Concurrence (in an opposed item)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in estimates")] <- "Concurrence (in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in Interim Supply")] <- "Concurrence (in interim supply)"
votes$type[votes$bill_number == "None" & str_detect(votes$type, "^Concurrence in the Report")] <- "Concurrence (in a report)"
votes2 <- votes[, c(10,1,2,12,11,3,4,13,5,6,7,8,9)]
votes2$parliament_ID <- as.numeric(as.character(votes2$parliament_ID))
View(votes2)
write.csv(votes2, file="42division.csv")
votesTotal <- rbind(prev_divi,votes2)
write.csv(votesTotal, file="votesTotal.csv")
tail(votesTotal)
